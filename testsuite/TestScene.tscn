[gd_scene load_steps=11 format=3 uid="uid://b32t735vtvy16"]

[ext_resource type="Script" path="res://testsuite/TestScene.gd" id="3"]

[sub_resource type="CanvasItemMaterial" id="1"]
blend_mode = 4

[sub_resource type="Animation" id="2"]
resource_name = "Noise"
length = 5.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("TextureRect:material:shader_parameter/offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(1, 0)]
}

[sub_resource type="Animation" id="7"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("TextureRect:material:shader_parameter/offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_haaf3"]
_data = {
"Noise": SubResource("2"),
"RESET": SubResource("7")
}

[sub_resource type="Shader" id="Shader_4s8l6"]
code = "shader_type canvas_item;

uniform vec2 offset = vec2(0,0);

void fragment(){
	COLOR.rgb = texture(TEXTURE, fract(UV.rg + offset)).rgb;
	COLOR.a = 1.0f;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_i4tf8"]
shader = SubResource("Shader_4s8l6")
shader_parameter/offset = Vector2(0, 0)

[sub_resource type="Gradient" id="Gradient_h5b4i"]
offsets = PackedFloat32Array(0, 0.512077, 1)
colors = PackedColorArray(0, 0, 0, 1, 0.278431, 0.54902, 0.74902, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_84mph"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_rof67"]
width = 64
height = 64
seamless_blend_skirt = 0.28
color_ramp = SubResource("Gradient_h5b4i")
noise = SubResource("FastNoiseLite_84mph")

[node name="TestQOI" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = ExtResource("3")

[node name="GridContainer" type="GridContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="ViewportContainer" type="SubViewportContainer" parent="."]
material = SubResource("1")
layout_mode = 1
offset_left = 33.0
offset_top = 148.0
offset_right = 161.0
offset_bottom = 276.0
stretch = true

[node name="Viewport" type="SubViewport" parent="ViewportContainer"]
disable_3d = true
transparent_bg = true
handle_input_locally = false
gui_disable_input = true
size = Vector2i(128, 128)
render_target_update_mode = 4

[node name="AnimationPlayer" type="AnimationPlayer" parent="ViewportContainer/Viewport"]
libraries = {
"": SubResource("AnimationLibrary_haaf3")
}

[node name="TextureRect" type="TextureRect" parent="ViewportContainer/Viewport"]
material = SubResource("ShaderMaterial_i4tf8")
offset_right = 128.0
offset_bottom = 128.0
texture = SubResource("NoiseTexture2D_rof67")

[node name="Label" type="Label" parent="."]
layout_mode = 1
anchors_preset = 10
anchor_right = 1.0
offset_bottom = 104.0
grow_horizontal = 2
text = "Before starting this scene, please make sure that you have generated images by clicking \"Render test images\" in the parameters of the \"TestQOI\" node. You can cancel this process by holding down the ESC button.
After that, these images should be imported (just switch to another window and return to Godot after the process is complete).
To import .png as WebP or PNG, change the 'rendering/textures/lossless_compression/force_png' parameter in the project settings.
To import PNG as VRAM compressed or lossy WebP, change the default preset for importing textures in the Import tab."
autowrap_mode = 2

[node name="TextureRect" type="TextureRect" parent="."]
layout_mode = 1
offset_left = 200.0
offset_top = 148.0
offset_right = 200.0
offset_bottom = 148.0
